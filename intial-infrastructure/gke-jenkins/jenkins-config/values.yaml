controller:
  tag: "2.318-jdk11"
  installPlugins:
    - kubernetes:1.30.5
    - workflow-job:2.42
    - workflow-aggregator:2.6
    - credentials-binding:1.27
    - git:4.9.0
    - google-oauth-plugin:1.0.6
    - google-source-plugin:0.4
    - google-kubernetes-engine:0.8.6
    - google-storage-plugin:1.5.4
    - blueocean:1.25.1
    - job-dsl:1.78.1
    - configuration-as-code:1.54
    - github-oauth:0.34
  resources:
    requests:
      cpu: "50m"
      memory: "1024Mi"
    limits:
      cpu: "1"
      memory: "2500Mi"
  javaOpts: "-Xms2500m -Xmx2500m"
  serviceType: ClusterIP
agent:
  resources:
    requests:
      cpu: "500m"
      memory: "256Mi"
    limits:
      cpu: "1"
      memory: "512Mi"
persistence:
  size: 100Gi
serviceAccount:
  name: cd-jenkins

#
#
#master:
#  tag: "2.318"
#  containerEnv:
#    - name: %{ PROJECT_ID }
#      valueFrom:
#        secretKeyRef:
#            name: jenkins-k8s-config
#            key: project_id
#    - name: GITHUB_REPO
#      valueFrom:
#        secretKeyRef:
#            name: github-secrets
#            key: github_repo
#    - name: GITHUB_USERNAME
#      valueFrom:
#        secretKeyRef:
#            name: github-secrets
#            key: github_username
#    - name: GITHUB_TOKEN
#      valueFrom:
#        secretKeyRef:
#            name: github-secrets
#            key: github_token
#    - name: jenkins_tf_ksa
#      valueFrom:
#        secretKeyRef:
#            name: jenkins-k8s-config
#            key: jenkins_tf_ksa
#  servicePort: 80
#  serviceType: LoadBalancer
#  installPlugins:
#    - kubernetes:1.26.2
#    - workflow-job:2.39
#    - workflow-aggregator:2.6
#    - credentials-binding:1.23
#    - git:4.3.0
#    - blueocean:1.23.2
#    - docker-custom-build-environment:1.7.3
#    - credentials:2.3.11
#    - docker-commons:1.17
#    - docker-workflow:1.23
#    - job-dsl:1.77
#    - configuration-as-code:1.41
#    - jdk-tool:1.4
#  JCasC:
#    enabled: true
#    configScripts:
#        cloud: |
#            jenkins:
#                clouds:
#                    - kubernetes:
#                        name: "gke-executors"
#                        serverUrl: "https://kubernetes.default"
#                        jenkinsTunnel: "jenkins-agent:50000"
#                        jenkinsUrl: "http://jenkins:80"
#                        skipTlsVerify: true
#                        namespace: "default"
#                        templates:
#                            - name: "jenkins-jnlp"
#                              namespace: "default"
#                              nodeUsageMode: NORMAL
#                              label: "jnlp-exec"
#                              containers:
#                                - name: "jnlp"
#                                  image: "jenkins/jnlp-slave"
#                                  alwaysPullImage: false
#                                  workingDir: "/home/jenkins/agent"
#                                  ttyEnabled: true
#                                  command: ""
#                                  args: ""
#                                  resourceRequestCpu: "500m"
#                                  resourceLimitCpu: "1000m"
#                                  resourceRequestMemory: "1Gi"
#                                  resourceLimitMemory: "2Gi"
#                              volumes:
#                                - emptyDirVolume:
#                                    memory: false
#                                    mountPath: "/tmp"
#                              idleMinutes: "1"
#                              activeDeadlineSeconds: "120"
#                              slaveConnectTimeout: "1000"
#                            - name: "terraform"
#                              namespace: "default"
#                              nodeUsageMode: NORMAL
#                              serviceAccount: ${jenkins_tf_ksa}
#                              label: "terraform-exec"
#                              containers:
#                                - name: "terraform"
#                                  image: "hashicorp/terraform:0.12.29"
#                                  alwaysPullImage: false
#                                  workingDir: "/home/jenkins/agent"
#                                  ttyEnabled: true
#                                  command: "/bin/sh -c"
#                                  args: "cat"
#                                  resourceRequestCpu: "100m"
#                                  resourceLimitCpu: "500m"
#                                  resourceRequestMemory: "500Mi"
#                                  resourceLimitMemory: "1Gi"
#                              volumes:
#                                - emptyDirVolume:
#                                    memory: false
#                                    mountPath: "/tmp"
#                              podRetention: "never"
#                              activeDeadlineSeconds: "300"
#                              slaveConnectTimeout: "1000"
#        credentials: |
#            credentials:
#                system:
#                    domainCredentials:
#                    - credentials:
#                        - usernamePassword:
#                            scope: GLOBAL
#                            id: "github-token"
#                            username: ${GITHUB_USERNAME}
#                            password: ${GITHUB_TOKEN}
#                            description: "Github personal token"
#        init-jobs: |
#            jobs:
#              - script: >
#                    multibranchPipelineJob('terraform-jenkins-create-demo') {
#                        factory {
#                        workflowBranchProjectFactory {
#                            scriptPath('pipeliness/./Jenkinsfile')
#                        }
#                        }
#                        branchSources {
#                        github {
#                            id('12312313')
#                            scanCredentialsId('github-token')
#                            repoOwner("${GITHUB_USERNAME}")
#                            repository("${GITHUB_REPO}")
#                            buildOriginBranch(true)
#                            buildOriginPRMerge(true)
#                            includes("dev prod PR*")
#                        }
#                        }
#                        orphanedItemStrategy {
#                        discardOldItems {
#                            numToKeep(10)
#                        }
#                        }
#                        triggers {
#                        periodic(1)
#                        }
#                    }
